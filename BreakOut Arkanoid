<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Breakout Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1e1e3f 50%, #2a2a5a 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            color: white;
            overflow: hidden;
        }

        .game-container {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(15px);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }

        .game-title {
            font-size: 3em;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7aa, #f9ca24);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { text-shadow: 0 0 10px rgba(78, 205, 196, 0.5); }
            to { text-shadow: 0 0 20px rgba(255, 107, 107, 0.5); }
        }

        .game-info {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
            font-size: 1.3em;
            font-weight: bold;
        }

        .stat {
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 15px;
            min-width: 100px;
        }

        #gameCanvas {
            border: 3px solid #4ecdc4;
            border-radius: 15px;
            background: radial-gradient(circle at center, #000428 0%, #004e92 100%);
            box-shadow: 
                0 0 30px rgba(78, 205, 196, 0.3),
                inset 0 0 50px rgba(0, 0, 0, 0.5);
        }

        .controls {
            margin-top: 20px;
            font-size: 0.9em;
            opacity: 0.9;
            line-height: 1.6;
        }

        .game-over, .level-complete {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.95);
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            z-index: 100;
            border: 3px solid #4ecdc4;
            animation: slideIn 0.5s ease-out;
        }

        @keyframes slideIn {
            from { transform: translate(-50%, -60%) scale(0.8); opacity: 0; }
            to { transform: translate(-50%, -50%) scale(1); opacity: 1; }
        }

        .game-over h2, .level-complete h2 {
            color: #ff6b6b;
            margin-bottom: 20px;
            font-size: 2.5em;
        }

        .level-complete h2 {
            color: #4ecdc4;
        }

        .action-btn {
            background: linear-gradient(45deg, #4ecdc4, #45b7aa);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            cursor: pointer;
            margin: 10px;
            transition: all 0.3s;
        }

        .action-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(78, 205, 196, 0.4);
        }

        .power-up {
            position: absolute;
            width: 30px;
            height: 20px;
            border-radius: 10px;
            text-align: center;
            font-size: 12px;
            font-weight: bold;
            line-height: 20px;
            animation: fall 3s linear;
        }

        @keyframes fall {
            from { transform: translateY(0); }
            to { transform: translateY(600px); }
        }

        @media (max-width: 768px) {
            .game-container {
                padding: 20px;
                margin: 10px;
            }
            
            .game-title {
                font-size: 2em;
            }
            
            #gameCanvas {
                width: 350px;
                height: 500px;
            }
            
            .game-info {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="game-title">üéØ BREAKOUT</h1>
        
        <div class="game-info">
            <div class="stat">Score: <span id="score">0</span></div>
            <div class="stat">Lives: <span id="lives">3</span></div>
            <div class="stat">Level: <span id="level">1</span></div>
        </div>
        
        <canvas id="gameCanvas" width="600" height="400"></canvas>
        
        <div class="controls">
            <strong>Desktop:</strong> Move mouse or A/D keys to control paddle<br>
            <strong>Mobile:</strong> Touch and drag to move paddle<br>
            <strong>Start:</strong> Click canvas or press Space
        </div>
    </div>

    <div class="game-over" id="gameOver">
        <h2>Game Over!</h2>
        <p>Final Score: <span id="finalScore">0</span></p>
        <p>Level Reached: <span id="finalLevel">1</span></p>
        <button class="action-btn" onclick="restartGame()">Play Again</button>
    </div>

    <div class="level-complete" id="levelComplete">
        <h2>Level Complete!</h2>
        <p>Bonus Points: <span id="bonusScore">0</span></p>
        <button class="action-btn" onclick="nextLevel()">Next Level</button>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Game constants
        const PADDLE_WIDTH = 100;
        const PADDLE_HEIGHT = 12;
        const BALL_RADIUS = 8;
        const BRICK_ROWS = 6;
        const BRICK_COLS = 10;
        const BRICK_WIDTH = 55;
        const BRICK_HEIGHT = 20;
        const BRICK_PADDING = 5;

        // Game variables
        let paddle = {
            x: (canvas.width - PADDLE_WIDTH) / 2,
            y: canvas.height - 30,
            width: PADDLE_WIDTH,
            height: PADDLE_HEIGHT,
            speed: 8
        };

        let ball = {
            x: canvas.width / 2,
            y: canvas.height - 60,
            dx: 4,
            dy: -4,
            radius: BALL_RADIUS,
            speed: 5
        };

        let bricks = [];
        let powerUps = [];
        let particles = [];
        let score = 0;
        let lives = 3;
        let level = 1;
        let gameRunning = false;
        let mouseX = paddle.x + paddle.width / 2;
        let gameStarted = false;

        // Power-up types
        const POWER_UP_TYPES = [
            { type: 'expand', color: '#4ecdc4', symbol: '‚Üî', effect: 'Expand Paddle' },
            { type: 'multiball', color: '#f9ca24', symbol: '‚óè', effect: 'Multi Ball' },
            { type: 'slowball', color: '#a29bfe', symbol: '‚ö°', effect: 'Slow Ball' },
            { type: 'points', color: '#fd79a8', symbol: '‚òÖ', effect: '+500 Points' }
        ];

        // Particle effect
        function createParticles(x, y, color) {
            for (let i = 0; i < 8; i++) {
                particles.push({
                    x: x,
                    y: y,
                    dx: (Math.random() - 0.5) * 6,
                    dy: (Math.random() - 0.5) * 6,
                    color: color,
                    life: 30,
                    maxLife: 30
                });
            }
        }

        // Initialize bricks
        function createBricks() {
            bricks = [];
            const colors = ['#ff6b6b', '#ffa726', '#ffee58', '#66bb6a', '#42a5f5', '#ab47bc'];
            
            for (let r = 0; r < BRICK_ROWS; r++) {
                for (let c = 0; c < BRICK_COLS; c++) {
                    bricks.push({
                        x: c * (BRICK_WIDTH + BRICK_PADDING) + BRICK_PADDING + 15,
                        y: r * (BRICK_HEIGHT + BRICK_PADDING) + BRICK_PADDING + 50,
                        width: BRICK_WIDTH,
                        height: BRICK_HEIGHT,
                        color: colors[r % colors.length],
                        visible: true,
                        points: (BRICK_ROWS - r) * 10
                    });
                }
            }
        }

        // Draw paddle
        function drawPaddle() {
            const gradient = ctx.createLinearGradient(paddle.x, paddle.y, paddle.x, paddle.y + paddle.height);
            gradient.addColorStop(0, '#4ecdc4');
            gradient.addColorStop(1, '#45b7aa');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(paddle.x, paddle.y, paddle.width, paddle.height);
            
            // Add highlight
            ctx.fillStyle = 'rgba(255, 255, 255, 0.4)';
            ctx.fillRect(paddle.x, paddle.y, paddle.width, paddle.height / 3);
        }

        // Draw ball
        function drawBall() {
            const gradient = ctx.createRadialGradient(ball.x, ball.y, 0, ball.x, ball.y, ball.radius);
            gradient.addColorStop(0, '#ffffff');
            gradient.addColorStop(1, '#4ecdc4');
            
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fillStyle = gradient;
            ctx.fill();
            
            // Add glow effect
            ctx.shadowColor = '#4ecdc4';
            ctx.shadowBlur = 20;
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fill();
            ctx.shadowBlur = 0;
        }

        // Draw bricks
        function drawBricks() {
            bricks.forEach(brick => {
                if (brick.visible) {
                    const gradient = ctx.createLinearGradient(brick.x, brick.y, brick.x, brick.y + brick.height);
                    gradient.addColorStop(0, brick.color);
                    gradient.addColorStop(1, `${brick.color}88`);
                    
                    ctx.fillStyle = gradient;
                    ctx.fillRect(brick.x, brick.y, brick.width, brick.height);
                    
                    // Add border
                    ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
                    ctx.lineWidth = 2;
                    ctx.strokeRect(brick.x, brick.y, brick.width, brick.height);
                    
                    // Add highlight
                    ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
                    ctx.fillRect(brick.x, brick.y, brick.width / 3, brick.height / 3);
                }
            });
        }

        // Draw power-ups
        function drawPowerUps() {
            powerUps.forEach((powerUp, index) => {
                ctx.fillStyle = powerUp.color;
                ctx.fillRect(powerUp.x, powerUp.y, 30, 20);
                
                ctx.fillStyle = '#fff';
                ctx.font = '14px Arial';
                ctx.textAlign = 'center';
                ctx.fillText(powerUp.symbol, powerUp.x + 15, powerUp.y + 14);
                
                // Update position
                powerUp.y += 2;
                
                // Remove if off screen
                if (powerUp.y > canvas.height) {
                    powerUps.splice(index, 1);
                }
            });
        }

        // Draw particles
        function drawParticles() {
            particles.forEach((particle, index) => {
                const alpha = particle.life / particle.maxLife;
                ctx.fillStyle = `${particle.color}${Math.floor(alpha * 255).toString(16).padStart(2, '0')}`;
                ctx.fillRect(particle.x, particle.y, 3, 3);
                
                particle.x += particle.dx;
                particle.y += particle.dy;
                particle.life--;
                
                if (particle.life <= 0) {
                    particles.splice(index, 1);
                }
            });
        }

        // Ball collision with bricks
        function checkBrickCollision() {
            bricks.forEach((brick, index) => {
                if (brick.visible && 
                    ball.x + ball.radius > brick.x &&
                    ball.x - ball.radius < brick.x + brick.width &&
                    ball.y + ball.radius > brick.y &&
                    ball.y - ball.radius < brick.y + brick.height) {
                    
                    brick.visible = false;
                    score += brick.points;
                    
                    // Create particles
                    createParticles(brick.x + brick.width / 2, brick.y + brick.height / 2, brick.color);
                    
                    // Reverse ball direction
                    const ballCenterX = ball.x;
                    const ballCenterY = ball.y;
                    const brickCenterX = brick.x + brick.width / 2;
                    const brickCenterY = brick.y + brick.height / 2;
                    
                    if (Math.abs(ballCenterX - brickCenterX) > Math.abs(ballCenterY - brickCenterY)) {
                        ball.dx = -ball.dx;
                    } else {
                        ball.dy = -ball.dy;
                    }
                    
                    // Chance to drop power-up
                    if (Math.random() < 0.15) {
                        const powerUpType = POWER_UP_TYPES[Math.floor(Math.random() * POWER_UP_TYPES.length)];
                        powerUps.push({
                            x: brick.x + brick.width / 2 - 15,
                            y: brick.y + brick.height,
                            type: powerUpType.type,
                            color: powerUpType.color,
                            symbol: powerUpType.symbol
                        });
                    }
                    
                    updateUI();
                }
            });
        }

        // Check power-up collision
        function checkPowerUpCollision() {
            powerUps.forEach((powerUp, index) => {
                if (powerUp.x < paddle.x + paddle.width &&
                    powerUp.x + 30 > paddle.x &&
                    powerUp.y < paddle.y + paddle.height &&
                    powerUp.y + 20 > paddle.y) {
                    
                    activatePowerUp(powerUp.type);
                    powerUps.splice(index, 1);
                    createParticles(powerUp.x + 15, powerUp.y + 10, powerUp.color);
                }
            });
        }

        // Activate power-up
        function activatePowerUp(type) {
            switch (type) {
                case 'expand':
                    paddle.width = Math.min(200, paddle.width + 30);
                    setTimeout(() => {
                        paddle.width = Math.max(60, paddle.width - 30);
                    }, 10000);
                    break;
                case 'multiball':
                    // Create two additional balls
                    for (let i = 0; i < 2; i++) {
                        balls.push({
                            x: ball.x,
                            y: ball.y,
                            dx: (Math.random() - 0.5) * 8,
                            dy: ball.dy,
                            radius: BALL_RADIUS
                        });
                    }
                    break;
                case 'slowball':
                    ball.dx *= 0.7;
                    ball.dy *= 0.7;
                    setTimeout(() => {
                        ball.dx /= 0.7;
                        ball.dy /= 0.7;
                    }, 8000);
                    break;
                case 'points':
                    score += 500;
                    updateUI();
                    break;
            }
        }

        // Initialize multiple balls support
        let balls = [];

        // Update ball physics
        function updateBall() {
            if (!gameStarted) return;
            
            const allBalls = [ball, ...balls];
            
            allBalls.forEach((currentBall, ballIndex) => {
                currentBall.x += currentBall.dx;
                currentBall.y += currentBall.dy;
                
                // Wall collisions
                if (currentBall.x + currentBall.radius > canvas.width || currentBall.x - currentBall.radius < 0) {
                    currentBall.dx = -currentBall.dx;
                }
                
                if (currentBall.y - currentBall.radius < 0) {
                    currentBall.dy = -currentBall.dy;
                }
                
                // Bottom collision (life lost)
                if (currentBall.y + currentBall.radius > canvas.height) {
                    if (ballIndex === 0) {
                        // Main ball
                        lives--;
                        updateUI();
                        
                        if (lives <= 0) {
                            gameOver();
                            return;
                        } else {
                            resetBall();
                        }
                    } else {
                        // Extra ball
                        balls.splice(ballIndex - 1, 1);
                    }
                }
                
                // Paddle collision
                if (currentBall.x > paddle.x && 
                    currentBall.x < paddle.x + paddle.width &&
                    currentBall.y + currentBall.radius > paddle.y &&
                    currentBall.y + currentBall.radius < paddle.y + paddle.height + 10) {
                    
                    currentBall.dy = -Math.abs(currentBall.dy);
                    
                    // Change angle based on where ball hits paddle
                    const hitPos = (currentBall.x - paddle.x) / paddle.width;
                    currentBall.dx = (hitPos - 0.5) * 8;
                    
                    // Ensure minimum vertical speed
                    if (Math.abs(currentBall.dy) < 2) {
                        currentBall.dy = currentBall.dy > 0 ? 2 : -2;
                    }
                }
            });
        }

        // Reset ball position
        function resetBall() {
            ball.x = canvas.width / 2;
            ball.y = canvas.height - 60;
            ball.dx = (Math.random() - 0.5) * 6;
            ball.dy = -Math.abs(ball.dy);
            balls = [];
            gameStarted = false;
        }

        // Update paddle position
        function updatePaddle() {
            paddle.x = mouseX - paddle.width / 2;
            paddle.x = Math.max(0, Math.min(canvas.width - paddle.width, paddle.x));
        }

        // Check brick collisions for all balls
        function checkAllBrickCollisions() {
            const allBalls = [ball, ...balls];
            
            allBalls.forEach(currentBall => {
                bricks.forEach(brick => {
                    if (brick.visible && 
                        currentBall.x + currentBall.radius > brick.x &&
                        currentBall.x - currentBall.radius < brick.x + brick.width &&
                        currentBall.y + currentBall.radius > brick.y &&
                        currentBall.y - currentBall.radius < brick.y + brick.height) {
                        
                        brick.visible = false;
                        score += brick.points;
                        
                        createParticles(brick.x + brick.width / 2, brick.y + brick.height / 2, brick.color);
                        
                        const ballCenterX = currentBall.x;
                        const ballCenterY = currentBall.y;
                        const brickCenterX = brick.x + brick.width / 2;
                        const brickCenterY = brick.y + brick.height / 2;
                        
                        if (Math.abs(ballCenterX - brickCenterX) > Math.abs(ballCenterY - brickCenterY)) {
                            currentBall.dx = -currentBall.dx;
                        } else {
                            currentBall.dy = -currentBall.dy;
                        }
                        
                        // Power-up chance
                        if (Math.random() < 0.15) {
                            const powerUpType = POWER_UP_TYPES[Math.floor(Math.random() * POWER_UP_TYPES.length)];
                            powerUps.push({
                                x: brick.x + brick.width / 2 - 15,
                                y: brick.y + brick.height,
                                type: powerUpType.type,
                                color: powerUpType.color,
                                symbol: powerUpType.symbol
                            });
                        }
                        
                        updateUI();
                    }
                });
            });
        }

        // Draw all balls
        function drawAllBalls() {
            const allBalls = [ball, ...balls];
            allBalls.forEach(currentBall => {
                const gradient = ctx.createRadialGradient(currentBall.x, currentBall.y, 0, currentBall.x, currentBall.y, currentBall.radius);
                gradient.addColorStop(0, '#ffffff');
                gradient.addColorStop(1, '#4ecdc4');
                
                ctx.beginPath();
                ctx.arc(currentBall.x, currentBall.y, currentBall.radius, 0, Math.PI * 2);
                ctx.fillStyle = gradient;
                ctx.fill();
            });
        }

        // Update UI
        function updateUI() {
            document.getElementById('score').textContent = score;
            document.getElementById('lives').textContent = lives;
            document.getElementById('level').textContent = level;
        }

        // Check level complete
        function checkLevelComplete() {
            if (bricks.every(brick => !brick.visible)) {
                const bonus = lives * 100 + level * 50;
                score += bonus;
                document.getElementById('bonusScore').textContent = bonus;
                document.getElementById('levelComplete').style.display = 'block';
                gameRunning = false;
            }
        }

        // Game over
        function gameOver() {
            gameRunning = false;
            document.getElementById('finalScore').textContent = score;
            document.getElementById('finalLevel').textContent = level;
            document.getElementById('gameOver').style.display = 'block';
        }

        // Next level
        function nextLevel() {
            level++;
            lives++;
            ball.dx *= 1.1;
            ball.dy *= 1.1;
            document.getElementById('levelComplete').style.display = 'none';
            createBricks();
            resetBall();
            gameRunning = true;
            updateUI();
            gameLoop();
        }

        // Main game loop
        function gameLoop() {
            if (!gameRunning) return;
            
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Update game objects
            updatePaddle();
            updateBall();
            checkAllBrickCollisions();
            checkPowerUpCollision();
            checkLevelComplete();
            
            // Draw everything
            drawBricks();
            drawPaddle();
            drawAllBalls();
            drawPowerUps();
            drawParticles();
            
            requestAnimationFrame(gameLoop);
        }

        // Start game
        function startGame() {
            createBricks();
            paddle.x = (canvas.width - PADDLE_WIDTH) / 2;
            paddle.width = PADDLE_WIDTH;
            resetBall();
            powerUps = [];
            particles = [];
            balls = [];
            score = 0;
            lives = 3;
            level = 1;
            gameRunning = true;
            gameStarted = false;
            
            document.getElementById('gameOver').style.display = 'none';
            document.getElementById('levelComplete').style.display = 'none';
            updateUI();
            gameLoop();
        }

        // Restart game
        function restartGame() {
            startGame();
        }

        // Mouse controls
        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            mouseX = e.clientX - rect.left;
        });

        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            if (!gameRunning && e.key === ' ') {
                e.preventDefault();
                startGame();
                return;
            }
            
            if (!gameRunning) return;
            
            switch (e.key) {
                case 'ArrowLeft':
                case 'a':
                case 'A':
                    mouseX = Math.max(paddle.width / 2, mouseX - 20);
                    break;
                case 'ArrowRight':
                case 'd':
                case 'D':
                    mouseX = Math.min(canvas.width - paddle.width / 2, mouseX + 20);
                    break;
                case ' ':
                    e.preventDefault();
                    if (!gameStarted) {
                        gameStarted = true;
                    }
                    break;
            }
        });

        // Touch controls
        let touching = false;
        
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            touching = true;
            
            if (!gameRunning) {
                startGame();
                return;
            }
            
            if (!gameStarted) {
                gameStarted = true;
            }
            
            const rect = canvas.getBoundingClientRect();
            mouseX = e.touches[0].clientX - rect.left;
        });

        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            if (touching && gameRunning) {
                const rect = canvas.getBoundingClientRect();
                mouseX = e.touches[0].clientX - rect.left;
            }
        });

        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            touching = false;
        });

        // Click to start
        canvas.addEventListener('click', (e) => {
            if (!gameRunning) {
                startGame();
            } else if (!gameStarted) {
                gameStarted = true;
            }
        });

        // Initialize game
        startGame();
        
        // Initial draw
        ctx.fillStyle = '#4ecdc4';
        ctx.font = '24px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('üéØ BREAKOUT', canvas.width / 2, canvas.height / 2 - 50);
        ctx.font = '18px Arial';
        ctx.fillText('Click to Start', canvas.width / 2, canvas.height / 2);
        ctx.font = '14px Arial';
        ctx.fillText('Move paddle to launch ball', canvas.width / 2, canvas.height / 2 + 30);
    </script>
</body>
</html>
